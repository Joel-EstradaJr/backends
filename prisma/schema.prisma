// Corrected Unified Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================== CORE HR STRUCTURES ==================
model Department {
  id             Int         @id @default(autoincrement())
  departmentName String      @unique
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  candidates     Candidate[]
  positions      Position[]
}

model Position {
  id           Int         @id @default(autoincrement())
  positionName String
  departmentId Int
  candidates   Candidate[]
  employees    Employee[]
  department   Department  @relation(fields: [departmentId], references: [id])
  @@unique([positionName, departmentId])
}

model Employee {
  id                     String               @id @default(cuid())
  employeeNumber         String               @unique
  firstName              String
  lastName               String
  middleName             String?
  suffix                 String?
  birthdate              DateTime
  hiredate               DateTime
  terminationDate        DateTime?
  terminationReason      String?
  basicRate              Decimal?
  employeeStatus         String               @default("active")
  employeeType           String               @default("regular")
  employeeClassification String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  
  // Contact / Address
  phone                  String
  email                  String?              @unique
  emergencyContactName   String?
  emergencyContactNo     String?
  barangay               String
  streetAddress          String
  city                   String
  province               String
  zipCode                String
  country                String
  
  // Employment
  positionId             Int
  position               Position             @relation(fields: [positionId], references: [id])
  
  // Other Details
  expireDate             DateTime?
  licenseNo              String?
  licenseType            String?
  restrictionCodes       String[]             @default([])
  
  // Relations
  attendances            Attendance[]
  benefits               Benefit[]
  deductions             Deduction[]
  cashAdvanceRequests    CashAdvanceRequest[]
  educations             Education[]
  governmentIDs          GovernmentID[]
  leaveRequests          LeaveRequest[]
  resignationRequests    ResignationRequest[]
  workExperiences        WorkExperience[]
  user                   User?

  // Inventory relations
  employeeRequests       EmployeeRequest[]

  // Operations relations
  regularBusAssignmentsAsDriver   RegularBusAssignment[] @relation("DriverAssignments")
  regularBusAssignmentsAsConductor RegularBusAssignment[] @relation("ConductorAssignments")
}

// ================== HR DATA ==================
model Attendance {
  id             Int       @id @default(autoincrement())
  employeeId     String
  date           DateTime
  status         String
  timeIn         DateTime?
  timeOut        DateTime?
  remarks        String?
  isHoliday      Boolean   @default(false)
  overtimeHours  Float?
  overtimeReason String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  employee       Employee  @relation(fields: [employeeId], references: [id])
  @@unique([employeeId, date])
}

model Benefit {
  id            Int         @id @default(autoincrement())
  employeeId    String
  value         Decimal
  frequency     String?
  effectiveDate DateTime
  endDate       DateTime?
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  benefitTypeId Int
  benefitType   BenefitType @relation(fields: [benefitTypeId], references: [id])
  employee      Employee    @relation(fields: [employeeId], references: [id])
}

model Deduction {
  id              Int           @id @default(autoincrement())
  employeeId      String
  type            String
  value           Decimal
  frequency       String
  effectiveDate   DateTime
  endDate         DateTime?
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deductionTypeId Int
  deductionType   DeductionType @relation(fields: [deductionTypeId], references: [id])
  employee        Employee      @relation(fields: [employeeId], references: [id])
}

model BenefitType {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  benefits    Benefit[]
}

model DeductionType {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  deductions  Deduction[]
}

// ================== CANDIDATE MANAGEMENT ==================
model Candidate {
  id                String                    @id @default(cuid())
  firstName         String
  middleName        String?
  lastName          String
  suffix            String?
  email             String?
  streetAddress     String
  barangay          String
  city              String
  province          String
  country           String
  birthdate         DateTime
  applicationStatus String
  applicationDate   DateTime
  sourceOfHire      String?
  departmentId      Int
  desiredPositionId Int
  interviewDate     DateTime?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  department        Department                @relation(fields: [departmentId], references: [id])
  position          Position                  @relation(fields: [desiredPositionId], references: [id])
  educations        CandidateEducation[]
  workExperiences   CandidateWorkExperience[]
}

model CandidateWorkExperience {
  id          Int       @id @default(autoincrement())
  candidateId String
  companyName String
  position    String
  startDate   DateTime
  endDate     DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model CandidateEducation {
  id           Int       @id @default(autoincrement())
  candidateId  String
  institution  String
  degree       String
  fieldOfStudy String?
  startDate    DateTime?
  endDate      DateTime?
  honors       String?
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  candidate    Candidate @relation(fields: [candidateId], references: [id])
}

// ================== EMPLOYEE DOCUMENTS ==================
model GovernmentID {
  id         Int              @id @default(autoincrement())
  employeeId String
  idNumber   String
  issuedDate DateTime?
  expiryDate DateTime?
  isActive   Boolean          @default(true)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  typeId     Int
  employee   Employee         @relation(fields: [employeeId], references: [id])
  type       GovernmentIDType @relation(fields: [typeId], references: [id])
  @@unique([employeeId, typeId])
}

model GovernmentIDType {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  description   String?
  governmentIDs GovernmentID[]
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  employeeId  String
  companyName String
  position    String
  startDate   DateTime
  endDate     DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  employee    Employee  @relation(fields: [employeeId], references: [id])
}

model Education {
  id           Int       @id @default(autoincrement())
  employeeId   String
  institution  String?
  degree       String?
  fieldOfStudy String?
  startDate    DateTime?
  endDate      DateTime?
  honors       String?
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  employee     Employee  @relation(fields: [employeeId], references: [id])
}

// ================== EMPLOYEE REQUESTS ==================
model CashAdvanceRequest {
  id           Int       @id @default(autoincrement())
  employeeId   String
  amount       Decimal
  reason       String?
  requestDate  DateTime  @default(now())
  status       String
  approvedDate DateTime?
  remarks      String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  employee     Employee  @relation(fields: [employeeId], references: [id])
}

model ResignationRequest {
  id            Int      @id @default(autoincrement())
  employeeId    String
  reason        String?
  requestDate   DateTime @default(now())
  effectiveDate DateTime
  status        String
  remarks       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  employee      Employee @relation(fields: [employeeId], references: [id])
}

model LeaveRequest {
  id           Int       @id @default(autoincrement())
  employeeId   String
  leaveType    String
  startDate    DateTime
  endDate      DateTime
  reason       String?
  status       String
  requestDate  DateTime  @default(now())
  approvedDate DateTime?
  remarks      String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  employee     Employee  @relation(fields: [employeeId], references: [id])
}

// ================== USER & AUTH ==================
model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model SecurityQuestion {
  id        Int      @id @default(autoincrement())
  question  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model User {
  id                 Int       @id @default(autoincrement())
  employeeId         String    @unique
  email              String    @unique
  password           String
  firstName          String
  lastName           String
  birthdate          DateTime
  phone              String?
  streetAddress      String?
  barangay           String?
  city               String?
  province           String?
  zipCode            String?
  country            String?
  mustChangePassword Boolean   @default(true)
  roleId             Int
  securityQuestionId Int
  securityAnswer     String
  resetToken         String?
  resetTokenExpiry   DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  // Relationships
  role             Role              @relation(fields: [roleId], references: [id])
  securityQuestion SecurityQuestion? @relation(fields: [securityQuestionId], references: [id])
  auditLogs        AuditLog[]
  employee         Employee          @relation(fields: [employeeId], references: [id])

  // Inventory created_by
  createdInventoryItems InventoryItem[]
  createdBatches        Batch[]
  createdEmployeeRequests EmployeeRequest[]
  createdBuses          Bus[]
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  timestamp DateTime @default(now())
  ipAddress String?
  details   String?
  user      User     @relation(fields: [userId], references: [id])
}

// (Removed legacy duplicate USER/AUTH block)

// ---------------- INVENTORY ----------------

model InventoryItem {
  item_id       String          @id @db.VarChar(20)
  category_id   String
  item_name     String          @db.VarChar(100)
  unit_measure  String          @db.VarChar(20)
  current_stock Int             @default(0)
  reorder_level Int             @default(0)
  status        InventoryStatus
  date_created  DateTime        @default(now())
  date_updated  DateTime        @updatedAt
  isdeleted     Boolean         @default(false)
  created_by    Int
  createdBy     User            @relation(fields: [created_by], references: [id])

  batches       Batch[]
  employeeRequests EmployeeRequest[]
  bus           Bus[]
  category      Category        @relation(fields: [category_id], references: [category_id])

  @@map("inventory_items")
}

model Batch {
  batch_id           String        @id @db.VarChar(20)
  item_id            String
  f_item_id          String        @db.VarChar(20) // Added missing field
  usable_quantity    Int           @default(0)
  defective_quantity Int           @default(0)
  missing_quantity   Int           @default(0)
  remarks            String?       @db.VarChar(255)
  expiration_date    DateTime?
  date_created       DateTime      @default(now())
  created_by         Int
  createdBy          User          @relation(fields: [created_by], references: [id])
  isdeleted          Boolean       @default(false)

  inventoryItem      InventoryItem @relation(fields: [item_id], references: [item_id])

  @@map("batches")
}

model Category {
  category_id    String          @id @db.VarChar(20)
  category_name  String          @unique @db.VarChar(100)
  date_created   DateTime        @default(now())
  isdeleted      Boolean         @default(false)
  inventoryItems InventoryItem[]

  @@map("categories")
}

model EmployeeRequest {
  request_id    String          @id @db.VarChar(20)
  item_id       String            
  emp_id        String           // Changed to String to match Employee.id
  request_type  RequestType     
  quantity      Int
  req_purpose   String          @db.VarChar(255)
  status        RequestStatus   
  expected_return_date DateTime?
  actual_return_date DateTime?
  date_created  DateTime        @default(now())
  date_updated  DateTime        @updatedAt
  isdeleted     Boolean         @default(false)
  created_by    Int

  inventoryItem InventoryItem   @relation(fields: [item_id], references: [item_id])
  employee      Employee        @relation(fields: [emp_id], references: [id])
  createdBy     User            @relation(fields: [created_by], references: [id])

  @@map("employee_requests")
}

model Bus {
  bus_id          String          @id @db.VarChar(20)
  item_id         String
  plate_number    String          @unique
  body_number     String          @unique @db.VarChar(20)
  body_builder    BodyBuilder
  bus_type        BusType
  manufacturer    String
  status          BusStatus
  chasis_number   String          @unique @db.VarChar(50)
  engine_number   String          @unique @db.VarChar(50)
  seat_capacity   Int
  model           String          @db.VarChar(50)
  year_model      Int
  route           String?          @db.VarChar(10)
  condition       BusCondition
  acquisition_date DateTime
  acquisition_method AcquisitionMethod
  warranty_expiration_date DateTime?
  registration_status  RegistrationStatus
  date_created    DateTime        @default(now())
  date_updated    DateTime        @updatedAt
  created_by      Int
  createdBy       User            @relation(fields: [created_by], references: [id])

  inventoryItem   InventoryItem   @relation(fields: [item_id], references: [item_id])

  secondHandDetails     SecondHandDetails?
  brandNewDetails       BrandNewDetails?
  busOtherFiles         BusOtherFiles[]
  busAssignments        BusAssignment[]

  @@map("bus")
}

model SecondHandDetails {
  s_bus_id               String    @id
  previous_owner         String
  previous_owner_contact String
  source                 BusSource
  odometer_reading       Int
  last_registration_date DateTime
  last_maintenance_date  DateTime
  bus_condition_notes    String?

  bus                    Bus    @relation(fields: [s_bus_id], references: [bus_id], onDelete: Cascade)
}

model BrandNewDetails {
  b_bus_id        String    @id
  dealer_name     String
  dealer_contact  String

  bus             Bus    @relation(fields: [b_bus_id], references: [bus_id], onDelete: Cascade)
}

model BusOtherFiles {
  bus_files_id    String    @id @db.VarChar(20)
  file_name       String
  file_type       String
  file_url        String
  date_uploaded   DateTime @default(now())

  bus_id          String
  bus             Bus    @relation(fields: [bus_id], references: [bus_id], onDelete: Cascade)

  @@map("bus_other_files")
}

// (Roles, SecurityQuestion, User, AuditLog redefined above per official HR)
// ---------------- OPERATIONS ----------------

model Quota_Policy {
  QuotaPolicyID String @id
  StartDate     DateTime @default(now())
  EndDate       DateTime @default(dbgenerated("(CURRENT_TIMESTAMP + interval '1 year')"))
  RegularBusAssignmentID String

  Fixed Fixed?
  Percentage Percentage?

  regularBusAssignment RegularBusAssignment @relation(fields: [RegularBusAssignmentID], references: [RegularBusAssignmentID])

  CreatedAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt
  CreatedBy String?
  UpdatedBy String?
}

model Fixed {
  FQuotaPolicyID String @id
  Quota Float 

  quotaPolicy Quota_Policy @relation(fields: [FQuotaPolicyID], references: [QuotaPolicyID], onDelete: Cascade)

  CreatedAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt
  CreatedBy String?
  UpdatedBy String?
}

model Percentage {
  PQuotaPolicyID String @id
  Percentage     Float

  quotaPolicy Quota_Policy @relation(fields: [PQuotaPolicyID], references: [QuotaPolicyID], onDelete: Cascade)

  CreatedAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt
  CreatedBy String?
  UpdatedBy String?
}

model Stop {
  StopID     String @id
  StopName   String
  latitude   String
  longitude  String
  IsDeleted  Boolean @default(false)

  routesAsStart Route[] @relation("StartStop")
  routesAsEnd   Route[] @relation("EndStop")
  RouteStops    RouteStop[]

  CreatedAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt
  CreatedBy String?
  UpdatedBy String?
}

model Route {
  RouteID     String @id
  StartStopID String
  EndStopID   String
  RouteName   String
  IsDeleted   Boolean @default(false)

  StartStop Stop @relation("StartStop", fields: [StartStopID], references: [StopID])
  EndStop   Stop @relation("EndStop", fields: [EndStopID], references: [StopID])
  RouteStops RouteStop[]
  BusAssignments BusAssignment[]

  CreatedAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt
  CreatedBy String?
  UpdatedBy String?
}

model RouteStop {
  RouteStopID String @id
  RouteID     String
  StopID      String
  StopOrder   Int

  Route Route @relation(fields: [RouteID], references: [RouteID])
  Stop  Stop  @relation(fields: [StopID], references: [StopID])

  @@unique([RouteID, StopID])

  CreatedAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt
  CreatedBy String?
  UpdatedBy String?
}

model BusAssignment {
  BusAssignmentID String @id
  BusID           String
  RouteID         String

  Battery         Boolean @default(false)
  Lights          Boolean @default(false)
  Oil             Boolean @default(false)
  Water           Boolean @default(false)
  Break           Boolean @default(false)
  Air             Boolean @default(false)
  Gas             Boolean @default(false)
  Engine          Boolean @default(false)
  TireCondition   Boolean @default(false)
  Self_Driver     Boolean @default(false)
  Self_Conductor  Boolean @default(false)
  IsDeleted       Boolean @default(false)
  Status          BusOperationStatus @default(NotReady)

  Route Route @relation(fields: [RouteID], references: [RouteID])
  Bus   Bus   @relation(fields: [BusID], references: [bus_id])
  RegularBusAssignment RegularBusAssignment?

  @@index([BusID])

  CreatedAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt
  CreatedBy String?
  UpdatedBy String?
}

model RegularBusAssignment {
  RegularBusAssignmentID String @id
  DriverID               String // String to reference Employee.id (cuid)
  ConductorID            String // String to reference Employee.id (cuid)
  BusAssignmentID        String @unique

  BusAssignment          BusAssignment @relation(fields: [BusAssignmentID], references: [BusAssignmentID])
  QuotaPolicies          Quota_Policy[]
  BusTrips               BusTrip[]

  LatestBusTripID String? @unique
  LatestBusTrip   BusTrip? @relation("LatestBusTrip", fields: [LatestBusTripID], references: [BusTripID])

  driver    Employee @relation("DriverAssignments", fields: [DriverID], references: [id])
  conductor Employee @relation("ConductorAssignments", fields: [ConductorID], references: [id])

  @@index([DriverID])
  @@index([ConductorID])

  CreatedAt DateTime @default(now())
}

model BusTrip {
  BusTripID          String    @id
  RegularBusAssignmentID String
  DispatchedAt       DateTime?
  TripExpense        Decimal?
  Sales              Decimal?
  Payment_Method     PaymentMethod?
  IsExpenseRecorded  Boolean   @default(false)
  IsRevenueRecorded  Boolean   @default(false)
  CreatedAt          DateTime  @default(now())
  UpdatedAt          DateTime  @updatedAt
  CreatedBy          String?
  UpdatedBy          String?

  regularBusAssignment RegularBusAssignment @relation(fields: [RegularBusAssignmentID], references: [RegularBusAssignmentID])
  latestForAssignment  RegularBusAssignment? @relation("LatestBusTrip")

  ticketBusTrips TicketBusTrip[]
}

model TicketType {
  TicketTypeID   String @id
  TypeName       String
  Price          Decimal
  Description    String?
  IsActive       Boolean @default(true)
  CreatedAt      DateTime @default(now())
  UpdatedAt      DateTime @updatedAt
  CreatedBy      String?
  UpdatedBy      String?

  ticketBusTrips TicketBusTrip[]
}

model TicketBusTrip {
  TicketBusTripID String @id
  BusTripID       String
  TicketTypeID    String
  QuantitySold    Int
  TotalAmount     Decimal
  CreatedAt       DateTime @default(now())
  UpdatedAt       DateTime @updatedAt
  CreatedBy       String?
  UpdatedBy       String?

  busTrip    BusTrip    @relation(fields: [BusTripID], references: [BusTripID])
  ticketType TicketType @relation(fields: [TicketTypeID], references: [TicketTypeID])

  @@unique([BusTripID, TicketTypeID])
}

// ---------------- ENUMS ----------------

enum InventoryStatus {
  Available
  OutOfStock
  Discontinued
}

enum RequestType {
  Issue
  Return
}

enum RequestStatus {
  Pending
  Approved
  Rejected
  Completed
}

enum BodyBuilder {
  Isuzu
  Toyota
  Hyundai
  Mitsubishi
  Other
}

enum BusType {
  Aircon
  NonAircon
  Jeepney
  Van
}

enum BusStatus {
  Active
  Inactive
  Maintenance
  Disposed
}

enum BusCondition {
  Excellent
  Good
  Fair
  Poor
}

enum AcquisitionMethod {
  Purchase
  Donation
  Lease
}

enum RegistrationStatus {
  Registered
  Unregistered
  Expired
  Pending
}

enum BusSource {
  Dealer
  Private
  Auction
  Other
}

enum BusOperationStatus {
  Ready
  NotReady
  InTransit
  Maintenance
}

enum PaymentMethod {
  Cash
  Card
  Digital
  Mixed
}
